/* =========================================================
   Extensions (Neon/Postgres)
   ========================================================= */
CREATE EXTENSION IF NOT EXISTS "pgcrypto";  -- for gen_random_uuid()
CREATE EXTENSION IF NOT EXISTS "citext";    -- case-insensitive email/username

/* =========================================================
   Utility: auto-update last_updated on row UPDATE
   ========================================================= */
CREATE OR REPLACE FUNCTION public.trigger_set_last_updated()
RETURNS TRIGGER AS $$
BEGIN
  NEW.last_updated = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

/* =========================================================
   SCHEMAS
   ========================================================= */
DO $$ BEGIN
  CREATE SCHEMA IF NOT EXISTS quickbooks;
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE SCHEMA IF NOT EXISTS google;
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

/* =========================================================
   PUBLIC — Users, Auth, Permissions
   ========================================================= */
CREATE TABLE IF NOT EXISTS public.users (
  id                      uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  first_name              text NOT NULL,
  last_name               text NOT NULL,

  address_line1           text,
  address_line2           text,
  city                    text,
  state                   text,
  zip_code                text,
  country                 text,

  mobile_phone            text,
  home_phone              text,
  email                   citext NOT NULL UNIQUE,
  username                citext UNIQUE,

  -- Local (password) auth; store only a hash
  password_hash           text,

  -- Role/flags & employment status
  is_admin                boolean NOT NULL DEFAULT false,         -- admin / not admin
  is_active               boolean NOT NULL DEFAULT true,          -- employed & active
  on_leave                boolean NOT NULL DEFAULT false,         -- on_leave flag

  -- Convenience rollups
  hours_worked_this_week  numeric(10,2) NOT NULL DEFAULT 0,
  hours_worked_last_week  numeric(10,2) NOT NULL DEFAULT 0,
  pay_rate                numeric(10,2),

  admin_notes             text,
  employee_notes          text,

  last_login              timestamptz,

  created_at              timestamptz NOT NULL DEFAULT NOW(),
  last_updated            timestamptz NOT NULL DEFAULT NOW()
);
CREATE TRIGGER trg_users_last_updated
BEFORE UPDATE ON public.users
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

CREATE TABLE IF NOT EXISTS public.user_permissions (
  id            uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id       uuid NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  permission    text NOT NULL,
  granted_by    uuid REFERENCES public.users(id) ON DELETE SET NULL,
  granted_at    timestamptz NOT NULL DEFAULT NOW(),

  created_at    timestamptz NOT NULL DEFAULT NOW(),
  last_updated  timestamptz NOT NULL DEFAULT NOW(),

  CONSTRAINT uq_user_permission UNIQUE (user_id, permission)
);
CREATE INDEX IF NOT EXISTS idx_user_permissions_user
  ON public.user_permissions (user_id);
CREATE TRIGGER trg_user_permissions_last_updated
BEFORE UPDATE ON public.user_permissions
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

-- OAuth and external identity bindings (e.g., Google)
CREATE TABLE IF NOT EXISTS public.auth_providers (
  id               uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id          uuid NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  provider         text NOT NULL,            -- 'google', etc.
  provider_user_id text NOT NULL,            -- sub/subject from IdP
  email            citext,                   -- provider email (may mirror users.email)

  access_token     text,
  refresh_token    text,
  expires_at       timestamptz,
  scope            text,
  token_type       text,

  created_at       timestamptz NOT NULL DEFAULT NOW(),
  last_updated     timestamptz NOT NULL DEFAULT NOW(),

  CONSTRAINT uq_provider_identity UNIQUE (provider, provider_user_id),
  CONSTRAINT uq_user_provider UNIQUE (user_id, provider)
);
CREATE INDEX IF NOT EXISTS idx_auth_providers_user
  ON public.auth_providers (user_id);
CREATE TRIGGER trg_auth_providers_last_updated
BEFORE UPDATE ON public.auth_providers
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

-- Sessions (JWT or random token)
CREATE TABLE IF NOT EXISTS public.auth_sessions (
  id             uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id        uuid NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  session_token  text NOT NULL UNIQUE,
  ip_address     inet,
  user_agent     text,
  created_at     timestamptz NOT NULL DEFAULT NOW(),
  expires_at     timestamptz NOT NULL,
  last_updated   timestamptz NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_auth_sessions_user
  ON public.auth_sessions (user_id);
CREATE TRIGGER trg_auth_sessions_last_updated
BEFORE UPDATE ON public.auth_sessions
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

-- Verification / reset tokens
CREATE TABLE IF NOT EXISTS public.auth_verification_tokens (
  id            uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id       uuid REFERENCES public.users(id) ON DELETE CASCADE,
  email         citext NOT NULL,
  token         text NOT NULL UNIQUE,
  type          text NOT NULL,               -- 'email_verification' | 'password_reset' | etc.
  expires_at    timestamptz NOT NULL,
  consumed_at   timestamptz,

  created_at    timestamptz NOT NULL DEFAULT NOW(),
  last_updated  timestamptz NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_verification_email_type
  ON public.auth_verification_tokens (email, type);
CREATE TRIGGER trg_auth_verification_tokens_last_updated
BEFORE UPDATE ON public.auth_verification_tokens
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

/* =========================================================
   QUICKBOOKS — Two-way sync for Customers, Items, Estimates, Invoices
   ========================================================= */
CREATE TABLE IF NOT EXISTS quickbooks.companies (
  realm_id     text PRIMARY KEY,  -- QBO Company/Realm ID
  name         text,
  country      text,

  created_at   timestamptz NOT NULL DEFAULT NOW(),
  last_updated timestamptz NOT NULL DEFAULT NOW()
);
CREATE TRIGGER trg_qb_companies_last_updated
BEFORE UPDATE ON quickbooks.companies
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

CREATE TABLE IF NOT EXISTS quickbooks.tokens (
  id                         bigserial PRIMARY KEY,
  realm_id                   text NOT NULL REFERENCES quickbooks.companies(realm_id) ON DELETE CASCADE,
  access_token               text NOT NULL,
  refresh_token              text NOT NULL,
  token_type                 text,
  scope                      text,
  expires_at                 timestamptz,
  refresh_token_expires_at   timestamptz,
  environment                text,  -- 'production' | 'sandbox'
  is_active                  boolean NOT NULL DEFAULT true,

  created_at                 timestamptz NOT NULL DEFAULT NOW(),
  last_updated               timestamptz NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_qb_tokens_realm_active
  ON quickbooks.tokens (realm_id, is_active);
CREATE TRIGGER trg_qb_tokens_last_updated
BEFORE UPDATE ON quickbooks.tokens
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

CREATE TABLE IF NOT EXISTS quickbooks.customers (
  id                 text PRIMARY KEY,  -- QBO Customer.Id (string)
  realm_id           text NOT NULL REFERENCES quickbooks.companies(realm_id) ON DELETE CASCADE,

  display_name       text NOT NULL,
  given_name         text,
  family_name        text,
  company_name       text,

  primary_email_addr text,
  mobile_phone       text,
  primary_phone      text,
  alternate_phone    text,
  fax                text,
  website            text,

  bill_line1         text, bill_line2 text, bill_city text, bill_state text, bill_postal_code text, bill_country text,
  ship_line1         text, ship_line2 text, ship_city text, ship_state text, ship_postal_code text, ship_country text,

  taxable            boolean,
  balance            numeric(14,2) NOT NULL DEFAULT 0,
  active             boolean NOT NULL DEFAULT true,
  notes              text,

  sync_token         text,
  metadata           jsonb,
  last_synced        timestamptz,

  created_at         timestamptz NOT NULL DEFAULT NOW(),
  last_updated       timestamptz NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_qb_customers_realm
  ON quickbooks.customers (realm_id);
CREATE INDEX IF NOT EXISTS idx_qb_customers_name
  ON quickbooks.customers (display_name);
CREATE INDEX IF NOT EXISTS idx_qb_customers_email
  ON quickbooks.customers (primary_email_addr);
CREATE TRIGGER trg_qb_customers_last_updated
BEFORE UPDATE ON quickbooks.customers
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

CREATE TABLE IF NOT EXISTS quickbooks.items (
  id                      text PRIMARY KEY, -- QBO Item.Id
  realm_id                text NOT NULL REFERENCES quickbooks.companies(realm_id) ON DELETE CASCADE,

  name                    text NOT NULL,
  sku                     text,
  description             text,
  type                    text, -- 'Inventory' | 'Service' | 'NonInventory' etc.
  active                  boolean NOT NULL DEFAULT true,
  taxable                 boolean,
  unit_price              numeric(14,2),
  sales_price             numeric(14,2),
  qty_on_hand             numeric(18,4),

  income_account_ref_id   text,
  expense_account_ref_id  text,
  asset_account_ref_id    text,

  sync_token              text,
  metadata                jsonb,
  last_synced             timestamptz,

  created_at              timestamptz NOT NULL DEFAULT NOW(),
  last_updated            timestamptz NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_qb_items_realm
  ON quickbooks.items (realm_id);
CREATE INDEX IF NOT EXISTS idx_qb_items_name
  ON quickbooks.items (name);
CREATE INDEX IF NOT EXISTS idx_qb_items_sku
  ON quickbooks.items (sku);
CREATE TRIGGER trg_qb_items_last_updated
BEFORE UPDATE ON quickbooks.items
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

CREATE TABLE IF NOT EXISTS quickbooks.invoices (
  id                           text PRIMARY KEY, -- QBO Invoice.Id (string)
  realm_id                     text NOT NULL REFERENCES quickbooks.companies(realm_id) ON DELETE CASCADE,

  doc_number                   text,
  txn_date                     date,
  due_date                     date,

  customer_id                  text REFERENCES quickbooks.customers(id) ON DELETE SET NULL,
  customer_ref_name            text,

  total_amt                    numeric(14,2) NOT NULL DEFAULT 0,
  balance                      numeric(14,2) NOT NULL DEFAULT 0,
  currency_ref                 text,
  exchange_rate                numeric(14,6),

  bill_line1                   text, bill_line2 text, bill_city text, bill_state text, bill_postal_code text, bill_country text,
  ship_line1                   text, ship_line2 text, ship_city text, ship_state text, ship_postal_code text, ship_country text,

  email_status                 text,
  print_status                 text,
  private_note                 text,
  memo                         text,
  status                       text,     -- derived or provided status

  sync_token                   text,
  metadata_create_time         timestamptz,
  metadata_last_updated_time   timestamptz,
  last_synced                  timestamptz,

  created_at                   timestamptz NOT NULL DEFAULT NOW(),
  last_updated                 timestamptz NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_qb_invoices_realm
  ON quickbooks.invoices (realm_id);
CREATE INDEX IF NOT EXISTS idx_qb_invoices_customer
  ON quickbooks.invoices (customer_id);
CREATE INDEX IF NOT EXISTS idx_qb_invoices_txn_date
  ON quickbooks.invoices (txn_date);
CREATE INDEX IF NOT EXISTS idx_qb_invoices_doc_number
  ON quickbooks.invoices (doc_number);
CREATE TRIGGER trg_qb_invoices_last_updated
BEFORE UPDATE ON quickbooks.invoices
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

CREATE TABLE IF NOT EXISTS quickbooks.invoices_line_items (
  id               bigserial PRIMARY KEY,
  invoice_id       text NOT NULL REFERENCES quickbooks.invoices(id) ON DELETE CASCADE,
  line_num         integer,
  detail_type      text,

  item_ref_id      text REFERENCES quickbooks.items(id) ON DELETE SET NULL,
  item_ref_name    text,

  description      text,
  service_date     date,
  qty              numeric(14,4),
  unit_price       numeric(14,6),
  amount           numeric(14,2),

  tax_code_ref_id  text,
  tax_code_ref_name text,
  class_ref_id     text,
  class_ref_name   text,

  last_synced      timestamptz,
  created_at       timestamptz NOT NULL DEFAULT NOW(),
  last_updated     timestamptz NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_qb_invoice_lines_invoice
  ON quickbooks.invoices_line_items (invoice_id);
CREATE INDEX IF NOT EXISTS idx_qb_invoice_lines_item
  ON quickbooks.invoices_line_items (item_ref_id);
CREATE TRIGGER trg_qb_invoice_lines_last_updated
BEFORE UPDATE ON quickbooks.invoices_line_items
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

CREATE TABLE IF NOT EXISTS quickbooks.estimates (
  id                           text PRIMARY KEY, -- QBO Estimate.Id
  realm_id                     text NOT NULL REFERENCES quickbooks.companies(realm_id) ON DELETE CASCADE,

  doc_number                   text,
  txn_date                     date,
  expiration_date              date,
  total_amt                    numeric(14,2) NOT NULL DEFAULT 0,
  status                       text,

  customer_id                  text REFERENCES quickbooks.customers(id) ON DELETE SET NULL,
  customer_ref_name            text,

  email_status                 text,
  print_status                 text,
  currency_ref                 text,
  exchange_rate                numeric(14,6),

  bill_line1                   text, bill_line2 text, bill_city text, bill_state text, bill_postal_code text, bill_country text,
  ship_line1                   text, ship_line2 text, ship_city text, ship_state text, ship_postal_code text, ship_country text,

  private_note                 text,
  memo                         text,

  sync_token                   text,
  metadata_create_time         timestamptz,
  metadata_last_updated_time   timestamptz,
  last_synced                  timestamptz,

  created_at                   timestamptz NOT NULL DEFAULT NOW(),
  last_updated                 timestamptz NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_qb_estimates_realm
  ON quickbooks.estimates (realm_id);
CREATE INDEX IF NOT EXISTS idx_qb_estimates_customer
  ON quickbooks.estimates (customer_id);
CREATE INDEX IF NOT EXISTS idx_qb_estimates_txn_date
  ON quickbooks.estimates (txn_date);
CREATE INDEX IF NOT EXISTS idx_qb_estimates_doc_number
  ON quickbooks.estimates (doc_number);
CREATE TRIGGER trg_qb_estimates_last_updated
BEFORE UPDATE ON quickbooks.estimates
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

CREATE TABLE IF NOT EXISTS quickbooks.estimates_line_items (
  id               bigserial PRIMARY KEY,
  estimate_id      text NOT NULL REFERENCES quickbooks.estimates(id) ON DELETE CASCADE,
  line_num         integer,
  detail_type      text,

  item_ref_id      text REFERENCES quickbooks.items(id) ON DELETE SET NULL,
  item_ref_name    text,

  description      text,
  service_date     date,
  qty              numeric(14,4),
  unit_price       numeric(14,6),
  amount           numeric(14,2),

  tax_code_ref_id  text,
  tax_code_ref_name text,
  class_ref_id     text,
  class_ref_name   text,

  last_synced      timestamptz,
  created_at       timestamptz NOT NULL DEFAULT NOW(),
  last_updated     timestamptz NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_qb_estimate_lines_estimate
  ON quickbooks.estimates_line_items (estimate_id);
CREATE INDEX IF NOT EXISTS idx_qb_estimate_lines_item
  ON quickbooks.estimates_line_items (item_ref_id);
CREATE TRIGGER trg_qb_estimate_lines_last_updated
BEFORE UPDATE ON quickbooks.estimates_line_items
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

-- Optional: webhook log for audit/troubleshooting
CREATE TABLE IF NOT EXISTS quickbooks.webhook_events (
  id            bigserial PRIMARY KEY,
  realm_id      text REFERENCES quickbooks.companies(realm_id) ON DELETE SET NULL,
  entity_name   text,         -- 'Invoice' | 'Estimate' | 'Customer' | 'Item'
  entity_id     text,
  action        text,         -- 'Create' | 'Update' | 'Delete'
  payload       jsonb,
  processed     boolean NOT NULL DEFAULT false,
  error_message text,

  created_at    timestamptz NOT NULL DEFAULT NOW(),
  last_updated  timestamptz NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_qb_webhooks_processed
  ON quickbooks.webhook_events (processed, entity_name);
CREATE TRIGGER trg_qb_webhook_events_last_updated
BEFORE UPDATE ON quickbooks.webhook_events
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

/* =========================================================
   GOOGLE — Calendars, Events, Assignments, Availability
   ========================================================= */
-- Optional per-user calendar registry
CREATE TABLE IF NOT EXISTS google.calendars (
  id           uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id      uuid NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  calendar_id  text NOT NULL,      -- Google calendar identifier (e.g., 'primary', or <id>@group.calendar.google.com)
  summary      text,
  description  text,
  time_zone    text,
  is_primary   boolean NOT NULL DEFAULT false,

  created_at   timestamptz NOT NULL DEFAULT NOW(),
  last_updated timestamptz NOT NULL DEFAULT NOW(),

  CONSTRAINT uq_google_calendar UNIQUE (user_id, calendar_id)
);
CREATE INDEX IF NOT EXISTS idx_google_calendars_user
  ON google.calendars (user_id);
CREATE TRIGGER trg_google_calendars_last_updated
BEFORE UPDATE ON google.calendars
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

-- Google Calendar events (company-wide)
CREATE TABLE IF NOT EXISTS google.calendar_events (
  id               uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  google_event_id  text NOT NULL,         -- stable Google event id
  calendar_id      uuid NOT NULL REFERENCES google.calendars(id) ON DELETE CASCADE,

  title            text NOT NULL,
  description      text,
  location         text,

  start_time       timestamptz NOT NULL,
  end_time         timestamptz NOT NULL,
  all_day          boolean NOT NULL DEFAULT false,
  status           text,                   -- 'confirmed' | 'tentative' | 'cancelled'

  -- Optional link to a QBO customer (for customer-specific jobs)
  qbo_customer_id  text REFERENCES quickbooks.customers(id) ON DELETE SET NULL,

  last_synced      timestamptz,
  created_at       timestamptz NOT NULL DEFAULT NOW(),
  last_updated     timestamptz NOT NULL DEFAULT NOW(),

  CONSTRAINT uq_google_event UNIQUE (google_event_id)
);
CREATE INDEX IF NOT EXISTS idx_google_events_time
  ON google.calendar_events (start_time, end_time);
CREATE INDEX IF NOT EXISTS idx_google_events_calendar
  ON google.calendar_events (calendar_id);
CREATE TRIGGER trg_google_calendar_events_last_updated
BEFORE UPDATE ON google.calendar_events
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

-- Assignment status enum
DO $$ BEGIN
  CREATE TYPE google.assignment_status AS ENUM ('pending','assigned','in_progress','completed','cancelled');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- Event ↔ Employee assignments (allow multiple employees per event)
CREATE TABLE IF NOT EXISTS google.work_assignments (
  id               uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  calendar_event_id uuid NOT NULL REFERENCES google.calendar_events(id) ON DELETE CASCADE,
  employee_id      uuid NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  assigned_by      uuid REFERENCES public.users(id) ON DELETE SET NULL,
  assigned_at      timestamptz NOT NULL DEFAULT NOW(),
  sequence_order   integer,

  status           google.assignment_status NOT NULL DEFAULT 'assigned',
  started_at       timestamptz,
  completed_at     timestamptz,

  admin_notes      text,
  employee_notes   text,

  created_at       timestamptz NOT NULL DEFAULT NOW(),
  last_updated     timestamptz NOT NULL DEFAULT NOW(),

  CONSTRAINT uq_event_employee UNIQUE (calendar_event_id, employee_id)
);
CREATE INDEX IF NOT EXISTS idx_work_assignments_employee
  ON google.work_assignments (employee_id);
CREATE TRIGGER trg_google_work_assignments_last_updated
BEFORE UPDATE ON google.work_assignments
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

-- Availability / time off blocks
CREATE TABLE IF NOT EXISTS google.employee_availability (
  id           uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  employee_id  uuid NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  start_time   timestamptz NOT NULL,
  end_time     timestamptz NOT NULL,
  available    boolean NOT NULL DEFAULT true,  -- false indicates PTO/blocked time
  reason       text,

  created_at   timestamptz NOT NULL DEFAULT NOW(),
  last_updated timestamptz NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_employee_availability_range
  ON google.employee_availability (employee_id, start_time, end_time);
CREATE TRIGGER trg_google_employee_availability_last_updated
BEFORE UPDATE ON google.employee_availability
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();

/* =========================================================
   PUBLIC — Time Clock (punches, edits, approvals)
   ========================================================= */
CREATE TABLE IF NOT EXISTS public.time_clock_entries (
  id                 uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id            uuid NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,

  clock_in           timestamptz NOT NULL,
  clock_out          timestamptz,
  lunch_start        timestamptz,
  lunch_end          timestamptz,

  total_hours        numeric(10,2),     -- optional materialized total ((clock_out - clock_in) - lunch)
  suspicious         boolean NOT NULL DEFAULT false,
  employee_note      text,

  last_edited_at     timestamptz,
  last_edited_by     uuid REFERENCES public.users(id) ON DELETE SET NULL,

  approved_by_admin  boolean NOT NULL DEFAULT false,
  approved_by_payroll boolean NOT NULL DEFAULT false,

  created_at         timestamptz NOT NULL DEFAULT NOW(),
  last_updated       timestamptz NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_time_clock_user_date
  ON public.time_clock_entries (user_id, clock_in);
CREATE INDEX IF NOT EXISTS idx_time_clock_payroll
  ON public.time_clock_entries (approved_by_payroll);
CREATE TRIGGER trg_time_clock_entries_last_updated
BEFORE UPDATE ON public.time_clock_entries
FOR EACH ROW EXECUTE FUNCTION public.trigger_set_last_updated();
